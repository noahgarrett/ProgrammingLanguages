statements  : NEWLINE* statement (NEWLINE+ statement)* NEWLINE*

statement   : KEYWORD:RETURN expr?
            : KEYWORD:CONTINUE
            : KEYWORD:BREAK
            : expr

expr        : KEYWORD:var IDENTIFIER EQ expr
            : comp-expr ((KEYWORD:AND|KEYWORD:OR) comp-expr)*

comp-expr   : NOT comp-expr
            : arith-expr ((EE|LT|GT|LTE|GTE) arith-expr)*

arith-expr  : term ((PLUS|MINUS) term)*

term        : factor ((MUL|DIV) factor)*

factor      : (PLUS|MINUS) factor
            : power

power       : call (POW factor)*

call        : call-def
            : atom (LPAREN (expr (COMMA expr)*)? RPAREN)?

call-def    : (IDENTIFIER DOT)? atom (LPAREN (expr (COMMA expr)*)? RPAREN)?

atom        : INT|FLOAT|STRING|MULTI_STRING
            : IDENTIFIER | IDENTIFIER LSQUARE expr RSQUARE
            : LPAREN expr RPAREN
            : import-from-expr
            : import-expr
            : dict-expr
            : list-expr
            : if-expr
            : for-expr
            : foreach-expr
            : while-expr
            : func-def

import-expr         : KEYWORD:import STRING SEMI

import-from-expr    : KEYWORD:from STRING KEYWORD:import STRING SEMI

dict-expr           : LBRACE ((IDENTIFIER COLON expr COMMA?)*)? RBRACE

list-expr           : LSQUARE (expr (COMMA expr)*)? RSQUARE

if-expr             : KEYWORD:IF expr LBRACE
                        (statement if-expr-b|if-expr-c?)
                    | (NEWLINE statements RBRACE|if-expr-b|if-expr-c)

if-expr-b   : KEYWORD:ELIF expr LBRACE
                (statement if-expr-b|if-expr-c?)
            | (NEWLINE statements RBRACE|if-expr-b|if-expr-c)

if-expr-c   : KEYWORD:ELSE
              statement
            | (NEWLINE statements RBRACE)

for-expr    : KEYWORD:FOR IDENTIFIER EQ expr KEYWORD:TO expr
                (KEYWORD:STEP expr)? LBRACE
              statement
            | (NEWLINE statements RBRACE)

foreach-expr: KEYWORD:foreach IDENTIFIER KEYWORD:in expr
                LBRACE (statement | (NEWLINE statements)) RBRACE

while-expr  : KEYWORD:WHILE expr LBRACE
              statement
             | (NEWLINE statements RBRACE)

func-def    : KEYWORD:FUN IDENTIFIER?
                LPAREN (IDENTIFIER (COMMA IDENTIFIER)*)? RPAREN
                (ARROW expr)
              | (NEWLINE statements RBRACE)